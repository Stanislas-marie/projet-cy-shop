
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


typedef struct {
    char nom[50];
    int ref;
    int taille;
    int prix;
    int stock;
} produits;


typedef struct {
    char historique[1000];
} client;


// Fonction qui identifie le client
client identification_client() {
    char identifiant[100];
    printf("Merci de vous connecter\n");
    printf("Saisissez votre prenom et votre nom sous la forme prenom nom\n");
    scanf("%s", identifiant);
    FILE* fichier = fopen(identifiant, "r");
    if (fichier == NULL) {
        printf("Erreur : impossible d'ouvrir le fichier %s.\n", identifiant);
        exit(1); // Quitter le programme en cas d'erreur
    }

    char ligne[1000]; // Supposons que chaque ligne contient au maximum 1000 caractères
    char historique[1000] = "";

    while (fgets(ligne, sizeof(ligne), fichier) != NULL) {
        // Ajouter la ligne à l'historique
        strcat(historique, ligne);
    }

    fclose(fichier);

    // Créer une structure client et copier l'historique
    client client;
    strcpy(client.historique, historique);
    printf("%s", client.historique);
    return client;
}


// Fonction qui affiche les produits
void afficherStocksProduits(const char* nomFichier) {
    FILE* fichier = fopen(nomFichier, "r");
    if (fichier == NULL) {
        printf("Erreur : impossible d'ouvrir le fichier %s.\n", nomFichier);
        return;
    }

    char ligne[100]; // Supposons que chaque ligne contient au maximum 100 caractères

    while (fgets(ligne, sizeof(ligne), fichier) != NULL) {
        printf("%s", ligne);
    }
    printf("\n");
    fclose(fichier);
}

// Fonction recherche
void rechercheProduit(const char* nomProduitRecherche, const char* nomFichier) {
    FILE* fichier = fopen(nomFichier, "r");
    if (fichier == NULL) {
        printf("Erreur : impossible d'ouvrir le fichier %s.\n", nomFichier);
        
    }

    char ligne[100]; // Supposons que chaque ligne contient au maximum 100 caractères

    while (fgets(ligne, sizeof(ligne), fichier) != NULL) {
        // Extraire les informations du produit de la ligne
        char nom[50];
        int stock, ref, taille, prix;

        sscanf(ligne, "%s %d %d %d %d", nom, &ref, &taille, &prix, &stock);

        // Vérifier si le produit correspond à celui recherché
        if (strcmp(nom, nomProduitRecherche) == 0) {
            printf("Informations du produit :\n");
            printf("Nom : %s\n", nom);
            printf("Référence : %d\n", ref);
            printf("Taille : %d\n", taille);
            printf("Prix : %d\n", prix);
            printf("Stock : %d\n", stock);
            fclose(fichier);

            return;
        }
    }

    printf("Produit non trouvé.\n");
    fclose(fichier);
}

// Fonction recherche stock
void recherche_produit() {
    const char* nomFichier = "stock.txt";
    char recherche[50];
    printf("\nQuel produit recherchez-vous ?\n");
    scanf("%s", recherche);
    rechercheProduit(recherche, nomFichier);
}

// Fonction qui affiche les "derniers produits du client"
void afficher_derniers_produits(client client) {
    int produits_achetes = 0;
    char *token;
    char *historique_copie = strdup(client.historique);

    // Récupérer le dernier produit acheté
    token = strtok(historique_copie, ",");
    char dernier_produit[100];
    strcpy(dernier_produit, token);

    // Parcourir l'historique pour récupérer les 3 derniers produits
    while (token != NULL) {
        strcpy(dernier_produit, token);
        token = strtok(NULL, ",");
        produits_achetes++;
    }

    // Afficher les 3 derniers produits achetés
    printf("Les 3 derniers produits achetés :\n");
    for (int i = 0; i < 3 && produits_achetes > 0; i++) {
        printf("%d. %s\n", produits_achetes, dernier_produit);
        token = strtok(NULL, ",");
        if (token != NULL) {
            strcpy(dernier_produit, token);
        }
        produits_achetes--;
    }

    free(historique_copie);
}
//fonction achat2
void achat_produit(produits *produits, int taille) {
    int i, quantite;
    char nom[50];
    float total = 0.0;
    char validation;

    for (i = 0; i < taille; i++) {
        printf("%s / %d / %d / %d / %d\n", produits[i].nom, produits[i].ref, produits[i].taille, produits[i].prix, produits[i].stock);
    }

    printf("Entrez le nom du produit que vous souhaitez acheter : ");
    scanf("%s", nom);

    printf("Entrez la quantité que vous souhaitez acheter : ");
    scanf("%d", &quantite);

    for (i = 0; i < taille; i++) {
        if (strcmp(nom, produits[i].nom) == 0) {
            if (quantite <= produits[i].stock) {
                total += quantite * produits[i].prix;
                produits[i].stock -= quantite;
                printf("Vous avez ajouté %d %s(s) à votre panier. Le total actuel est : %.2f\n", quantite, produits[i].nom, total);
            } else {
                printf("Nous sommes désolés, mais nous n'avons pas assez de stock pour votre demande.\n");
            }
        }
    }

    printf("Voulez-vous valider votre panier ? (O/N) : ");
    scanf(" %c", &validation);

    switch(validation) {
        case 'O':
        case 'o':
            printf("Merci pour votre achat. Votre total est : %.2f\n", total);
            break;
        case 'N':
        case 'n':
            printf("Votre panier a été annulé.\n");
            break;
        default:
            printf("Réponse non reconnue.\n");
    }
}
//fonction achat 1
void validation_achat(){


    produits produits[15];
    FILE *file = fopen("stock.txt", "r");

    if (file == NULL){
        printf("Impossible d'ouvrir le fichier\n");
        main();
    }

    int i = 0;
    
    fclose(file);

    char reponse;
    printf("Voulez-vous acheter un de nos produits ? (O/N) : ");
    scanf(" %c", &reponse);

    switch(reponse) {
        case 'O':
        case 'o':
            achat_produit(produits, i);
            break;
        case 'N':
        case 'n':
            printf("Merci et à bientôt.\n");
            break;
        default:
            printf("Réponse non reconnue.\n");
    }

}




// Fonction mode achat
void mode_achat(client client) {
    int a;
    afficher_derniers_produits(client);
    while (a != 3) {
        printf("====Menu Achat====\n");
        printf("Que voulez-vous faire ?\n");
        printf("1. Rechercher un produit en particulier\n");
        printf("2. Afficher le stock de tous les produits\n");
        printf("3. Retourner au menu principal\n");
        scanf("%d", &a);
        switch (a) {
            case 1:
                printf("Rechercher un produit\n");
                recherche_produit(); // Connaître le stock d'un produit
                break;
            case 2:
                printf("Afficher tous les produits\n");
                const char* nomFichier = "stock.txt";
                afficherStocksProduits(nomFichier);
                break;
            case 3:
                printf("Retour au menu principal\n");
                main(); // Sortir du mode achat et retourner au menu
                break;
            default:
                printf("Choix invalide.\n");
                break;
      }
    validation_achat();
    }
}

// Fonction pour afficher le menu principal
void afficher_menu() {
    printf("Menu principal :\n");
    printf("1. Menu gestion\n");
    printf("2. Menu achats\n");
    printf("3. Retourner au menu principal\n");
    printf("4. Quitter\n");
}

int main() {
    int choix = 0;
    const char* nomFichier = "stock";

    // Boucle principale du programme
    while (choix != 4) {
        afficher_menu();
        printf("Entrez votre choix : ");
        scanf("%d", &choix);
        fflush(stdin);

        switch (choix) {
           int choixa,choixb; 
            case 1:
                // menu gestion
                printf("Menu de gestion des stocks\n");
                break;

            case 2:
                // menu achat
              choixb=0;
                while (choixb != 4) {
                    fflush(stdin);
                    
                        printf("Menu achat\n");
                        printf("Avez-vous un compte client ?\n");
                        printf("1. Non\n");
                        printf("2. Oui\n");
                        printf("3. Supprimer un compte\n");
                        printf("4. Retour Menu\n");
                        scanf("%d", &choixb);
                  switch (choixb) {
                        case 1:
                             creation_client();
                            break;
                    case 2: 
                    break;
                        case 3:
                             sup_client();
                            break;
                        case 4:
                            main();
                            break;
                        
                    }
                    client client;
                  client=identification_client();
                  
                mode_achat( client);
              }
                
              
                break;

            case 3:
                main(); // retour menu principal
                break;

            case 4:
                // Quitter le programme
                printf("Au revoir !\n");
                break;

            default:
                printf("Choix invalide.\n");
                break;
        }
    }

    return 0;
}  
