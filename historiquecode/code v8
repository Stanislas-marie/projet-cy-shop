#include <stdio.h>
#include <stdlib.h>
#include <string.h>


typedef struct {
char nom[50];
int ref;
int taille;
int prix;
int stock;
} produits;


// Structure pour représenter un client 
typedef struct {
    char nom[50];
    char prenom[50];
    char historique[1000];
} client;
//fonction qui affiche un seulproduits

//fonction qui afffiche les produits 
void afficherStocksProduits(const char* nomFichier) {
    FILE* fichier = fopen(nomFichier, "r");
    if (fichier == NULL) {
        printf("Erreur : impossible d'ouvrir le fichier %s.\n", nomFichier);
        return;
    }

    char ligne[100]; // Supposons que chaque ligne contient au maximum 100 caractères

    while (fgets(ligne, sizeof(ligne), fichier) != NULL) {
        printf("%s", ligne);
    }
        printf("\n");
    fclose(fichier);
}

//fonction recherche 
void rechercheProduit(const char* nomProduitRecherche, const char* nomFichier) {
    FILE* fichier = fopen(nomFichier, "r");
    if (fichier == NULL) {
        printf("Erreur : impossible d'ouvrir le fichier %s.\n", nomFichier);
        return;
    }

    char ligne[100]; // Supposons que chaque ligne contient au maximum 100 caractères

    while (fgets(ligne, sizeof(ligne), fichier) != NULL) {
        // Extraire les informations du produit de la ligne
        char nom[50];
        int stock,ref,taille ,prix;

        sscanf(ligne, "%s %d %d %d %d", nom, &ref, &taille, &prix, &stock);

        // Vérifier si le produit correspond à celui recherché
        if (strcmp(nom, nomProduitRecherche) == 0) {
             printf("Informations du produit :\n");
            printf("Nom : %s\n", nom);
            printf("Référence : %d\n", ref);
            printf("Taille : %d\n", taille);
            printf("Prix : %d\n", prix);
            printf("Stock : %d\n", stock);
            fclose(fichier);
        
            return ;
        }
    }

    printf("Produit non trouvé.\n");
    fclose(fichier);
}

// fonction recherche stock
 void recherche_produit(){
  const char* nomFichier = "stock";
  char recherche [50];
  printf ("\n  quelle produit recherchez vous ?\n");
  scanf ("%s",recherche);
   rechercheProduit(recherche , nomFichier);
 }

//fonction qui affiche les 5 produits aves les stocks les plus bas
void afficherProduitsCritiques(const char* nomFichier) {
    FILE* fichier = fopen(nomFichier, "r");
    if (fichier == NULL) {
        printf("Erreur : impossible d'ouvrir le fichier %s.\n", nomFichier);
        return;
    }

    char ligne[100]; // Supposons que chaque ligne contient au maximum 100 caractères
    produits produits[100]; // Supposons qu'il y a au maximum 100 produits dans le fichier
    int nbProduits = 0;

    // Lire les produits du fichier et stocker les informations dans le tableau
    while (fgets(ligne, sizeof(ligne), fichier) != NULL) {
        char nom[50];
        
        int stock , taille , ref , prix;

        sscanf(ligne, "%s %d %d %d %d", nom, &ref, &taille, &prix, &stock);

        strcpy(produits[nbProduits].nom, nom);
        produits[nbProduits].ref = ref;
        produits[nbProduits].taille = taille;
        produits[nbProduits].prix = prix;
        produits[nbProduits].stock = stock;

        nbProduits++;
    }

    fclose(fichier);

    int i;

    printf("Produits avec un stock à zéro :\n");
    for (i = 0; i < nbProduits; i++) {
        if (produits[i].stock == 0) {
            printf("- Nom: %s, Référence: %d\n", produits[i].nom, produits[i].ref);
        }
    }

    printf("Produits avec les stocks les plus bas :\n");
    for (i = 0; i < 5; i++) {
        int indiceMin = 0;
        int stockMin = produits[0].stock;

        // Recherche de l'indice du produit avec le stock le plus bas
        for (int j = 1; j < nbProduits; j++) {
            if (produits[j].stock < stockMin) {
                indiceMin = j;
                stockMin = produits[j].stock;
            }
        }

        // Affichage du produit avec le stock le plus bas
        printf("- Nom: %s, Référence: %d, Stock: %d\n", produits[indiceMin].nom, produits[indiceMin].ref, produits[indiceMin].stock);

        // Mettre à jour le stock du produit avec une valeur élevée pour ne pas le sélectionner à nouveau
        produits[indiceMin].stock = 999999;
    }
}


// Fonction pour vérifier la taille totale des produits en stock
int verifierTailleTotale(const char* nomFichier) {
    FILE* fichier = fopen(nomFichier, "r");
    if (fichier == NULL) {
        printf("Erreur : impossible d'ouvrir le fichier %s.\n", nomFichier);
        return 0;
    }

    char ligne[100]; // Supposons que chaque ligne contient au maximum 100 caractères
    int tailleTotale = 0;

    // Lire les produits du fichier et calculer la taille totale des produits en stock
    while (fgets(ligne, sizeof(ligne), fichier) != NULL) {
        char nom[50];
        int stock, taille, ref, prix;

        sscanf(ligne, "%s %d %d %d %d", nom, &ref, &taille, &prix, &stock);

        tailleTotale += taille * stock;
    }

    fclose(fichier);

    return tailleTotale;
}

// Fonction pour augmenter le stock d'un produit
void augmenterStock(const char* nomProduit, int quantite, const char* nomFichier) {
    FILE* fichier = fopen(nomFichier, "r+");
    if (fichier == NULL) {
        printf("Erreur : impossible d'ouvrir le fichier %s.\n", nomFichier);
        return;
    }

    char ligne[100]; // Supposons que chaque ligne contient au maximum 100 caractères
    int produitTrouve = 0;

    while (fgets(ligne, sizeof(ligne), fichier) != NULL) {
        // Extraire les informations du produit de la ligne
        char nom[50];

        int stock, ref, taille, prix;

        sscanf(ligne, "%s %d %d %d %d", nom, &ref, &taille, &prix, &stock);
        // Vérifier si le produit correspond à celui recherché
        if (strcmp(nom, nomProduit) == 0) {
            // Augmenter le stock du produit
            stock += quantite;

            // Retourner au début de la ligne et mettre à jour le stock dans le fichier
            fseek(fichier, -strlen(ligne), SEEK_CUR);
            fprintf(fichier, "%s %d %d %d %d\n", nom, ref, taille, prix, stock);
            fflush(fichier);

            produitTrouve = 1;
            break;
        }
    }

    fclose(fichier);

    // Vérifier si la taille totale des produits en stock est inférieure à 500
    int tailleTotale = verifierTailleTotale(nomFichier);
    if (tailleTotale > 500) {
        printf("Attention : La taille totale des produits en stock est inférieure à 500.\n");
    }
}



// Fonction pour afficher le menu de gestion des stocks
void afficher_mode_gestion() {
    
    printf("1. Rechercher un produit\n");
    printf("2. augmenter un stock un produit\n");
    printf("3. Retour au menu principal\n");
}


// Fonction pour afficher le menu principal
void afficher_menu() {
    printf("Menu principal :\n");
    printf("1. menu gestion\n");
    printf("2. menu achats\n");
  
    printf("3. Quitter\n");}

int main() {
    int choix = 0;
    const char *nomFichier="stock";

    // Boucle principale du programme
    while (choix != 4) {
        afficher_menu();
        printf("Entrez votre choix : ");
        scanf("%d", &choix);
        fflush(stdin);
    
  switch (choix) {
    int choix,choixa,choixb; 
    printf("menu de gestion des stocks ");
    scanf("%d", &choix);

            case 1: // menu gestion 
               printf("menu de gestion des stocks\n ");
             
              
              while (choixa != 3) {
              afficherProduitsCritiques(nomFichier);
              printf ("Que voulez-vous faire?\n");
              afficher_mode_gestion();
              scanf("%d", &choixa);
              switch( choixa ){
                case 1: printf("Rechercher un produit\n");
                  
                  recherche_produit();// connaitre le stock d'un produit 
            break;
                case 2: printf("1. augmenter un stock un produit\n");
                  const char* nomFichier = "stock";
                  char nomProduit[50];
                  int quantite;
                    afficherStocksProduits(nomFichier);
                   printf("Entrez le nom du produit : ");
                    scanf("%s", nomProduit);
                    printf("Entrez la quantité à ajouter au stock : ");
                     scanf("%d", &quantite);
                  augmenterStock( nomProduit , quantite , nomFichier);
                  
                  
            break;
                case 3: printf("4. Retour au menu principal\n");
                main();   // sortir mode gestion des stocks retour au menu 
             break;
                
                default:
            printf("Choix invalide.\n");
            break;
              }
                
      }

            case 2:
                printf("menu achat");
              
            
    
        


            case 3:
                // retour menu principal



            case 4:
            // Quitter le programme
            printf("Au revoir !\n");
            break;
        default:
            printf("Choix invalide.\n");
            break;
    }
}

return 0;

}  
